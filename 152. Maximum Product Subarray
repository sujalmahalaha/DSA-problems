class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int pre=1; 
        int suff=1;
        int ans= INT_MIN;
        int n = nums.size();
        for(int i = 0 ; i <n ; i++){
            if(pre==0){pre=1;}
            if(suff==0){suff=1;}
            pre= pre*nums[i];
            suff= suff*nums[n-i-1];
            ans= max(ans, max(pre, suff));

        }
        return ans;
        
    }
};
//-----------------------------------------------------------------
Approach:

Idea is to find the maximum product from both sides,i.e, once in a forwarding direction and another in the backward direction.

Following are the steps for the approach:

Iteration from left to right once to get maximum product for forward direction.
If zero is encountered, we set all variables again to initial value.
